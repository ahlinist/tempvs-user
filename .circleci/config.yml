# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Run gradle dependencies
          command: |
            ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - run:
          name: Run unit tests
          command: |
            ./gradlew test
      - run:
          name: Save unit tests results
          command: |
            mkdir -p ~/unit-test/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/unit-test/ \;
          when: always
      - store_test_results:
          path: ~/unit-test
      - run:
          name: Run integration tests
          command: |
            ./gradlew integrationTest
      - run:
          name: Save integration tests results
          command: |
            mkdir -p ~/integration-test/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/integration-test/ \;
          when: always
      - store_test_results:
          path: ~/integration-test
      - run:
          name: Build fat jar
          command: |
            ./gradlew clean build -x test
      - store_artifacts:
          path: ~/repo/build/libs
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            cp build/libs/*.jar .
            docker build -t antonhlinisty/$HEROKU_APP_NAME .
      - run:
          name: Push docker image to dockerhub
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push antonhlinisty/$HEROKU_APP_NAME
      - run:
          name: Deploy at heroku
          command: |
            echo $HEROKU_API_KEY | docker login --username=$HEROKU_LOGIN registry.heroku.com --password-stdin
            docker tag  antonhlinisty/$HEROKU_APP_NAME registry.heroku.com/$HEROKU_APP_NAME/web
            docker push registry.heroku.com/$HEROKU_APP_NAME/web
            docker inspect registry.heroku.com/$HEROKU_APP_NAME/web --format={{.Id}} > WEB_DOCKER_IMAGE_ID_FILE
            export WEB_DOCKER_IMAGE_ID=$(cat WEB_DOCKER_IMAGE_ID_FILE)
            curl -n -X PATCH https://api.heroku.com/apps/$HEROKU_APP_NAME/formation \
              -d '{ "updates": [ { "type": "web", "docker_image": "'"$WEB_DOCKER_IMAGE_ID"'" }]}' \
              -H "Content-Type: application/json" \
              -H "Accept: application/vnd.heroku+json; version=3.docker-releases" \
              -H "Authorization: Bearer $HEROKU_API_KEY"
